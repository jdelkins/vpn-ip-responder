#!/usr/bin/env python

import sys
import os
from argparse import ArgumentParser
import re
import time
import urllib
import logging, logging.handlers
import subprocess
import json
try:
    from xmlrpclib import ServerProxy
except:
    from xmlrpc.client import ServerProxy

config = None

def parse_args():
    parser = ArgumentParser(description='Punch a forward port and send to an XML RPC server')
    parser.add_argument('--client-id',        '-i', required=True, type=str, help='String or file used to identify this VPN session')
    parser.add_argument('--local-ip-url',     '-l', required=True, type=str, help='Location (file or url) of file containing the local VPN endpoint IP')
    parser.add_argument('--credentials-file', '-c', required=True, type=str, help='Location (file or url) of file with VPN user & pass, each on one line')
    parser.add_argument('--server-type',      '-t', type=str, default='vpn_port_rpcserver', choices=['vpn_port_rpcserver', 'rtorrent'], help='Server type: vpn_port_rpcserver or rtorrent')
    parser.add_argument('--server-ip',        '-s', default='127.0.0.1', type=str, help='XML RPC server address (default localhost)')
    parser.add_argument('--server-port',      '-p', default=8108, type=str, help='XML RPC server port (default 8108)')
    parser.add_argument('--logging',          '-L', metavar='FILE_OR_SYSLOG', default='stderr', help='Send logging info to given file or to "syslog" or "stderr" (default "stderr")')
    parser.add_argument('--sleep',            '-S', type=int, default=0, help='Seconds to sleep before making RPC call')
    return parser.parse_args()

def is_url(s):
    regex = re.compile(
        r'^(?:http|ftp)s?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
        r'localhost|' #localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return True if regex.match(s) else False

def send_port(dest_ip, dest_port, forwarding_port, server_type):
    s = ServerProxy('http://{}:{}'.format(dest_ip, dest_port))
    try:
        if server_type == 'vpn_port_rpcserver':
            s.update_vpn_port(forwarding_port)
        elif server_type == 'rtorrent':
            s.set_port_range('{0}-{0}'.format(forwarding_port))
            s.set_bind('0.0.0.0')
        else:
            raise Exception('Invalid server type "{}"'.format(server_type))
    except Exception as e:
        logging.critical('RPC call failed to http://{}:{} - {}'.format(dest_ip, dest_port, e))

def get_forwarded_port(local_ip_url, cred_url, client_id):
    logging.info('reading VPN local IP from {}'.format(local_ip_url))
    local_ip_file = urllib.urlopen(local_ip_url)
    local_ip = local_ip_file.readline().strip()
    local_ip_file.close()

    logging.info('reading PIA credentials from {}'.format(cred_url))
    cred_file = urllib.urlopen(cred_url)
    [user_name, passwd] = [l.strip() for l in cred_file.readlines()]
    cred_file.close()

    # set up the port forward request to PIA
    logging.info('requesting forwarding port from PIA')
    # note: i use curl rather than urllib because it has the crucial
    # --interface option, allowing us to source-route the request over the vpn
    response = subprocess.check_output(['curl', '-s', '--interface', local_ip,
        '-d', 'client_id={}'.format(client_id),
        '-d', 'user={}'.format(user_name),
        '-d', 'pass={}'.format(passwd),
        '-d', 'local_ip={}'.format(local_ip),
        'https://www.privateinternetaccess.com/vpninfo/port_forward_assignment'])

    # read the response, hopefully it worked. The form is as follows:
    # {"port":37542}
    port = int(json.loads(response)['port'])
    logging.info('success: PIA gives us {:d}'.format(port))
    return port

if __name__ == '__main__':
    config = parse_args()
    if config.logging in ['stderr', 'syslog']:
        logging.basicConfig(format='%(asctime)s %(module)s %(levelname)s %(message)s', level=logging.INFO)
        if config.logging == 'syslog':
            log_address=('localhost', 514)
            if os.path.exists('/dev/log'):
                log_address='/dev/log'
            logging.getLogger().addHandler(logging.handlers.SysLogHandler(address=log_address, facility=logging.handlers.SysLogHandler.LOG_DAEMON))
    else:
        logging.basicConfig(filename=config.logging, format='%(asctime)s %(module)s %(levelname)s %(message)s', level=logging.INFO)

    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError as e:
        logging.critical('fork failed: %d (%s)' % (e.errno, e.strerror))
        sys.exit(1)

    os.chdir('/')
    os.setsid()
    os.umask(0)

    # give a couple of seconds for the routes to set up
    time.sleep(config.sleep)

    # if the provided client id is a url or path, read it to get the client id (a hex string)
    real_client_id = config.client_id
    if is_url(config.client_id) or os.path.isfile(config.client_id):
        client_id_file = urllib.urlopen(config.client_id)
        real_client_id = client_id_file.readline().strip()
        client_id_file.close()

    # do the work
    try:
        fwd_port = get_forwarded_port(config.local_ip_url, config.credentials_file, real_client_id)
        send_port(config.server_ip, config.server_port, fwd_port, config.server_type)
    except Exception as e:
        logging.critical(e)
        exit(1)

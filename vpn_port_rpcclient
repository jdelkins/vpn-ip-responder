#!/usr/bin/env python

from __future__ import print_function
import sys
import os
from argparse import ArgumentParser
import local_updates
import re
import time
import urllib

config = None

def parse_args():
    parser = ArgumentParser(description='Punch a forward port and send to an XML RPC server')
    parser.add_argument('--client-id',        '-i', required=True, type=str, help='String or file used to identify this VPN session')
    parser.add_argument('--local-ip-url',     '-l', required=True, type=str, help='Location (file or url) of file containing the local VPN endpoint IP')
    parser.add_argument('--credentials-file', '-c', required=True, type=str, help='Location (file or url) of file with VPN user & pass, each on one line')
    parser.add_argument('--server-ip',        '-s', default='127.0.0.1', type=str, help='XML RPC server address (default localhost)')
    parser.add_argument('--server-port',      '-p', default=8108, type=str, help='XML RPC server port (default 8108)')
    return parser.parse_args()

def is_url(s):
    regex = re.compile(
        r'^(?:http|ftp)s?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
        r'localhost|' #localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return True if regex.match(s) else False

if __name__ == '__main__':
    config = parse_args()
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError as e:
        print('fork failed: %d (%s)' % (e.errno, e.strerror), file=sys.stderr)
        sys.exit(1)

    os.chdir('/')
    os.setsid()
    os.umask(0)

    # give a couple of seconds for the routes to set up
    time.sleep(2)

    real_client_id = config.client_id
    if is_url(config.client_id) or os.path.isfile(config.client_id):
        client_id_file = urllib.urlopen(config.client_id)
        real_client_id = client_id_file.readline().strip()
        client_id_file.close()

    fwd_port = local_updates.get_forwarded_port(config.local_ip_url, config.credentials_file, config.client_id)
    local_updates.send_port(config.server_ip, config.server_port, fwd_port)


#!/usr/bin/python -u

from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler
from argparse import ArgumentParser
import os
import sys
import json
import subprocess
import re
import logging, logging.handlers

config = None
port_filename_t = 'forwarded.port'

def vpn_port_changed(port, config_dir):
    assert(port > 0)

    core_conf_file = open(os.path.join(config_dir, 'core.conf'))
    # skip over initial turd
    logging.info('parsing deluge core.conf')
    while core_conf_file.read(1) != '}':
        pass
    core_conf_json = json.loads(core_conf_file.read())
    core_conf_file.close()
    deluged_port = core_conf_json['daemon_port']
    logging.debug('found daemon_port = {}'.format(deluged_port))

    logging.info('reading deluged user/pass from auth file')
    auth_file = open(os.path.join(config_dir, 'auth'))
    (username, password) = re.match('^([^:]+):([^:]+):', auth_file.readline()).group(1, 2)
    logging.debug('username = {} : pass = {}'.format(username, password))
    auth_file.close()

    logging.info('writing the port to a file if it has changed')
    port_filename = os.path.join(config_dir, port_filename_t)
    oldport = 0
    try:
        port_file = open(port_filename, 'r')
        oldport = int(port_file.readline().strip())
        port_file.close()
    except Exception as e:
        logging.error('problem reading cached port file: {}'.format(e))
        logging.warning('continuing anyway')

    if oldport == port:
        logging.info('Note: port {} is unchanged from cached value.'.format(port))
    else:
        logging.info('Note: new port {} is different from cached value of {}.'.format(port, oldport))
        try:
            logging.debug('writing the port cache file')
            port_file = open(port_filename, 'w')
            port_file.write('{}\n'.format(port))
            port_file.close()
        except Exception as e:
            logging.error('problem writing cached port file: {}'.format(e))
            logging.warning('continuing anyway')

    # also  update deluged's port if it is running
    logging.info('updating deluge configuration')
    deluge_cmd = ['deluge-console', '-c', config_dir, 'connect 127.0.0.1:{} {} {}; config -s listen_ports ({:d}, {:d})'.format(deluged_port, username, password, port, port)]
    logging.debug('> "{}"'.format('" "'.join(deluge_cmd)))
    deluge_rc = subprocess.run(deluge_cmd)
    try:
        deluge_rc.check_returncode()
    except subprocess.CalledProcessError as e:
        logging.critical('attempt failed to update deluge config: deluge-console returned %d %s', deluge_rc.returncode, deluge_rc.stderr)
        raise

# call the worker function
def update_vpn_port(port):
    global config
    logging.info('received notice of forwarded port change: %d', port)
    try:
        vpn_port_changed(port, config.config_dir)
    except Exception as e:
        # catch everything and keep going
        logging.error(e)

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

def serve_it(listen_ip, listen_port):
    """Create server and serve!"""
    server = SimpleXMLRPCServer((listen_ip, listen_port),
                                requestHandler=RequestHandler,
                                allow_none=True,
                                logRequests=False)
    server.register_introspection_functions()
    server.register_function(update_vpn_port)
    logging.info('starting XML RPC server on {}:{}'.format(listen_ip, listen_port))
    try:
        server.serve_forever()
    except Exception as e:
        logging.critical('received exception: {}'.format(e))
        logging.info('exiting')
        sys.exit(1)

if __name__ == '__main__':
    parser = ArgumentParser(description='XMLRPC server to set deluge port')
    parser.add_argument('--listen-ip',   '-l', metavar='IP', type=str, default='0.0.0.0', help='IP address to listen on (default 0.0.0.0)')
    parser.add_argument('--listen-port', '-p', metavar='PORT', type=int, default=8108, help='IP port to listen on (default 8108)')
    parser.add_argument('--config-dir',  '-c', metavar='DIR', type=str, default='/config', help='Deluge config directory (default "/config")')
    parser.add_argument('--logging',     '-L', metavar='FILE_OR_SYSLOG', default='stderr', help='Send logging info to given file or to "syslog" (default stderr)')
    config = parser.parse_args()
    if config.logging in ['stderr', 'syslog']:
        logging.basicConfig(format='%(asctime)s %(module)s %(levelname)s %(message)s', level=logging.INFO)
        if config.logging == 'syslog':
            log_address=('localhost', 514)
            if os.path.exists('/dev/log'):
                log_address='/dev/log'
            logging.getLogger().addHandler(logging.handlers.SysLogHandler(address=log_address, facility=logging.handlers.SysLogHandler.LOG_DAEMON))
    else:
        logging.basicConfig(filename=config.logging, format='%(asctime)s %(module)s %(levelname)s %(message)s', level=logging.INFO)
    serve_it(config.listen_ip, config.listen_port)
